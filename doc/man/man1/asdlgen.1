'\" t
.\"     Title: asdlgen
.\"    Author: [see the "AUTHOR(S)" section]
.\" Generator: Asciidoctor 2.0.10
.\"      Date: 2020-04-02
.\"    Manual: \ \&
.\"    Source: SML/NJ
.\"  Language: English
.\"
.TH "ASDLGEN" "1" "2020-04-02" "SML/NJ" "\ \&"
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.ss \n[.ss] 0
.nh
.ad l
.de URL
\fI\\$2\fP <\\$1>\\$3
..
.als MTO URL
.if \n[.g] \{\
.  mso www.tmac
.  am URL
.    ad l
.  .
.  am MTO
.    ad l
.  .
.  LINKSTYLE blue R < >
.\}
.SH "NAME"
asdlgen \- compiler for the Abstract Syntax Description Language (ASDL).
.SH "SYNOPSIS"
.sp
\fBasdlgen\fP \fICOMMAND\fP [ \fIOPTIONS\fP ] \fIFILE\fP ...
.sp
where \fICOMMAND\fP is one of the following:
.sp
\fBhelp\fP
.RS 4
prints information about the available options to the standard output.
.RE
.sp
\fBversion\fP
.RS 4
prints the version of \fBasdlgen\fP to the standard output.
.RE
.sp
\fBc++\fP or \fBcxx\fP
.RS 4
generate \fBC++\fP code.
.RE
.sp
\fBsml\fP
.RS 4
generate \fBSML\fP code.
.RE
.sp
\fBcheck\fP
.RS 4
check the correctness of the input specifications, but do not generate
output.
.RE
.SH "DESCRIPTION"
.sp
\fBAsdlgen\fP reads the specified of files, which should
contain ASDL module and view declarations, and produces pickling
and unpickling code.
.SH "OPTIONS"
.SS "COMMON OPTIONS"
.sp
\fB\-n\fP
.RS 4
Do not write any output files. Instead write the list of files that
would have been written to the standard output.
.RE
.sp
\fB\-d\fP \fIDIR\fP, \fB\-\-output\-directory=\fP\(cqDIR\(aq
.RS 4
Specify the output directory to place the generated files.
By default the output will be placed in the same directory
as the input file from which it was produced.
.RE
.sp
\fB\-\-gen=\fP\(cqNAMES\(aq
.RS 4
Specifies the components to generate, where \fINAMES\fP is a comma\-separated
list of names taken from the following:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.  sp -1
.  IP \(bu 2.3
.\}
\fBtypes\fP \(em generate the type definitions from the ASDL specification.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.  sp -1
.  IP \(bu 2.3
.\}
\fBmemory\fP \(em generate the memory pickler
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.  sp -1
.  IP \(bu 2.3
.\}
\fBfile\fP \(em generate the file pickler
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.  sp -1
.  IP \(bu 2.3
.\}
\fBsexp\fP \(em generate the S\-Expression pickler (SML only).
.RE
.RE
.SS "C++ OPTIONS"
.sp
\fB\-\-base\-include=\fP\(cqFILE\(aq
.RS 4
Specify the name of the \fBC++\fP header file that defines the primitive ASDL types and functions. The default value is asdl/asdl.hxx.
.RE
.SS "SML OPTIONS"
.sp
\fB\-\-cm=\fP\(cqFILE\(aq
.RS 4
Generate a CM file for the pickler; this will define a CM library.
Note that if the ASDL specification includes primitive modules, these
will be included in the list of exported structures, but the supporting
source files will have to be added to the CM file by hand.
.RE
.sp
\fB\-\-mlb=\fP\(cqFILE\(aq
.RS 4
Generate an MLB file for the pickler. Note that if the ASDL specification
includes primitive modules, these will be included in the list of
exported structures, but the supporting source files will have to be
added to the MLB file by hand.
.RE
.SH "AUTHOR"
.sp
The original version of \fBasdlgen\fP was written by Dan Wang as part of
the National Compiler Infrastructure Project at Princeton University.
This version of the tool was implemented by John Reppy.
.SH "SEE\-ALSO"
.sp
\fIASDL Reference Manual\fP (included in the \fBSML/NJ\fP documentation).
.SH "COPYING"
.sp
Copyright \(co 2020 The Fellowship of SML/NJ
.sp
This is free software; see the source for copying  conditions.   There  is  NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.